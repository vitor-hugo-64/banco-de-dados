DROP TABLE M_PRODUTO;
CREATE TABLE M_PRODUTO(
    COD_PRODUTO INT NOT NULL,
    TIPO_PRODUTO VARCHAR2(45),
    PRECO NUMBER(18,2)
);

ALTER TABLE M_PRODUTO
ADD CONSTRAINT PK_PRODUTO
PRIMARY KEY(COD_PRODUTO);

DROP TABLE M_ESTOQUE;
CREATE TABLE M_ESTOQUE(
    COD_ESTOQUE INT NOT NULL,
    COD_PRODUTO INT NOT NULL,
    QUANTIDADE INT
);

ALTER TABLE M_ESTOQUE
ADD CONSTRAINT PK_ESTOQUE
PRIMARY KEY(COD_ESTOQUE);

DROP TABLE M_MOVIMENTO_ESTOQUE;
CREATE TABLE M_MOVIMENTO_ESTOQUE(
    COD_MOVIMENTO_ESTOQUE INT NOT NULL,
    COD_PRODUTO INT NOT NULL,
    NOME_PRODUTO VARCHAR2(45),
    TIPO_MOVIMENTO VARCHAR(1),
    DATA_MOVIMENTO DATE
);

ALTER TABLE M_MOVIMENTO_ESTOQUE
ADD CONSTRAINT PK_MOVIMENTO_ESTOQUE
PRIMARY KEY(COD_MOVIMENTO_ESTOQUE);

ALTER TABLE M_MOVIMENTO_ESTOQUE
ADD CONSTRAINT FK_MOVIMENTO_PRODUTO
FOREIGN KEY(COD_PRODUTO) REFERENCES M_PRODUTO(COD_PRODUTO);

ALTER TABLE M_MOVIMENTO_ESTOQUE
DROP CONSTRAINT FK_MOVIMENTO_PRODUTO;

DROP TABLE M_MOVIMENTO_PRODUTO;
CREATE TABLE M_MOVIMENTO_PRODUTO(
    COD_MOVIMENTO INT NOT NULL,
    COD_PRODUTO INT NOT NULL,
    NOME_PRODUTO VARCHAR2(45),
    TIPO_MOVIMENTO VARCHAR(1),
    DATA_MOVIMENTO DATE
);

ALTER TABLE M_MOVIMENTO_PRODUTO
ADD CONSTRAINT PK_MOVIMENTO_PRODUTO
PRIMARY KEY(COD_MOVIMENTO);

CREATE SEQUENCE S_ID START WITH 1;

-- TRIGGER QUE IRA REGISTRAR QUANDO UM NOVO PRODUTO É CADASTRADO --
DROP TRIGGER T_REGISTRO_PRODUTO;
CREATE OR REPLACE TRIGGER T_REGISTRO_PRODUTO
AFTER INSERT OR DELETE  ON M_PRODUTO
FOR EACH ROW
BEGIN

    IF INSERTING THEN
       
       INSERT INTO M_MOVIMENTO_PRODUTO VALUES( S_ID.NEXTVAL, :NEW.COD_PRODUTO, :NEW.TIPO_PRODUTO, 'E', SYSDATE);
    
    ELSIF DELETING THEN
    
        INSERT INTO M_MOVIMENTO_PRODUTO VALUES( S_ID.NEXTVAL, :OLD.COD_PRODUTO, :OLD.TIPO_PRODUTO, 'S', SYSDATE);
        
    END IF;
    
END;


INSERT INTO M_PRODUTO VALUES( 1, 'TRAKINAS', 1.75);
INSERT INTO M_PRODUTO VALUES( 2, 'BOMBRIL', 4.50);
INSERT INTO M_PRODUTO VALUES( 3, 'KITKAT', 3.00);
INSERT INTO M_PRODUTO VALUES( 4, 'COCA-COLA', 7.75);
INSERT INTO M_PRODUTO VALUES( 5, 'TODYNHO', 2.00);

DELETE FROM M_PRODUTO WHERE COD_PRODUTO = 2;
DELETE FROM M_PRODUTO WHERE COD_PRODUTO = 3;

INSERT INTO M_PRODUTO VALUES( 6, 'BOMBRIL', 4.50);
INSERT INTO M_PRODUTO VALUES( 7, 'KITKAT', 3.00);

SELECT * FROM M_PRODUTO;
SELECT * FROM M_MOVIMENTO_PRODUTO;
SELECT * FROM M_ESTOQUE;
SELECT * FROM M_MOVIMENTO_ESTOQUE;


-- TRIGGER QUE IRÁ REGISTRAR MOVIMENTAÇÃO FEITA EM ESTOQUE --
CREATE OR REPLACE TRIGGER T_MOVIMENTACAO_ESTOQUE
BEFORE INSERT OR DELETE ON M_ESTOQUE
FOR EACH ROW
DECLARE
    CURSOR C1 IS
        SELECT * FROM M_PRODUTO WHERE COD_PRODUTO = :NEW.COD_PRODUTO;
    R1 C1%ROWTYPE;
BEGIN

    OPEN C1;
        FETCH C1 INTO R1;
        IF C1%NOTFOUND THEN
            INSERT INTO M_MOVIMENTO_ESTOQUE VALUES( S_ID.NEXTVAL, :NEW.COD_PRODUTO, 'NÃO EXISTE PRODUTO COM ESSE CÓDIGO', 'E', SYSDATE);
        ELSE
            IF INSERTING THEN
                INSERT INTO M_MOVIMENTO_ESTOQUE VALUES( S_ID.NEXTVAL, R1.COD_PRODUTO, R1.TIPO_PRODUTO, 'E', SYSDATE);
            ELSIF DELETING THEN
                INSERT INTO M_MOVIMENTO_ESTOQUE VALUES( S_ID.NEXTVAL, R1.COD_PRODUTO, R1.TIPO_PRODUTO, 'S', SYSDATE);
            END IF;
        END IF;
    CLOSE C1;

END;

INSERT INTO M_ESTOQUE VALUES ( 1, 1, 25);
INSERT INTO M_ESTOQUE VALUES ( 2, 3, 50);
INSERT INTO M_ESTOQUE VALUES ( 3, 4, 14);
INSERT INTO M_ESTOQUE VALUES ( 4, 2, 21);
INSERT INTO M_ESTOQUE VALUES ( 5, 3, 50);
INSERT INTO M_ESTOQUE VALUES ( 6, 4, 14);